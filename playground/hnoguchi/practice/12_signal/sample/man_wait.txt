/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   wait.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hnoguchi <hnoguchi@student.42tokyo.jp>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/10 17:11:36 by hnoguchi          #+#    #+#             */
/*   Updated: 2023/03/10 19:54:25 by hnoguchi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * man 2 wait
 * man 2 waitpid
 *
 * wait for process termination
 *
 * #include <sys/types.h> // lecacy
 * #include <sys/wait.h>
 * pid_t	wait(int *stat_loc);
 * pid_t	waitpid(pid_t pid, int *stat_loc, int options);
 *
 * DESCRIPTION
 * The wait() function suspends execution of its calling process until [stat_loc] information is available for a terminated child process, or a signal is received.
 * On return from a successful wait() call,
 * the [stat_loc] area contains termination information about the process that exited as defined below.
 *
 *
 * pid_t	wait4(pid_t pid, int *stat_loc, int options, struct rusage *rusage);
 *
 *
 * The wait4() call provides a more general interface for programs that need to wait for certain child processes,
 * that need resource utilization statistics accumulated by child processes,
 * or that require options.
 * The [pid] specifies the set of child processes for which to wait.
 * 
 * If [pid] is [-1],
 * the call waits for any child process.
 * If [pid] is [ 0],
 * the call waits for any child process in the process group of the caller.
 * If [pid] is [0 < pid],
 * the call waits for the process with process id [pid].
 * If [pid] is [pid < -1],
 * the call waits for any process whose process group id equals the absolute value of [pid].
 *
 * The [stat_loc] is defined below.
 *
 * The [options] contains thte bitwize [OR] of any of the following options.
 * The [WHOHANG] option is used to indicate that the call should not block if there are no processes that wish to report status.
 * If the [WUNTRACED] option is set,
 * children of the current process that are stopped due to a [SIGTTIN], [SIGTTOU], [SIGTSTP], or [SIGSTOP] signal also have their status reported.
 * When the[WNOHANG] option is specified and no processes wish to report status, wait4() returns a process id of [0].
 *
 * If [rusage] is [rusage != 0],
 * a summary of the resources used by the terminated process and all its children is returned.
 * (this information is currently not available for stopped processes)
 *
 *
 * The other wait functions are implemented using wait4();
 * The waitpid() call is identical to wait4(); with an [rusage] value of zero.
 *
 *
 * WIFEXITED(status)
 * Return [true] if the process terminated normally by acall to _exit(2) or exit(3).
 *
 * WEXITSTATUS(status)
 * If WIFEXITED(status) is true,
 * evaluates to the low-order 8bits of the argument passed to
 * _exit(2) or exit(3) by the child.
 *
 * 
 * WIFSIGNALED(status)
 * Return [true] if the process terminated due to receipt of a signal.
 * 
 * WTERMSIG(status)
 * If WIFSIGNALED(status) is true,
 * evaluates to the number of the signal that caused the termination of the process.
 *
 *
 * RETURN VALUES
 * If wait() returns due to a stopped or terminated child process,
 * the process ID of the child is returned to the calling process.
 * Otherwise, return [-1] and set errno.
 * If waitpid() returns due to a stopped or terminated child process,
 * the process ID of the child is returned to the calling process.
 * If there are no children not previously awaited, -1 is returned with errnoset to [ECHILD].
 * If an error is detected or a caught signal aborts the call, a value of -1 is returned and set errno.
 *
 * ERROR
 * wait():
 * [ECHILD] : Return process id not exist.
 * [EFAULT] : The [status] or [rusage] arg points is illegal address.
 * [EINVAL] : The [options] is invalide or undefined flags.
 * 
 * waitpid()
 * [ECHILD] : [pid] does not exist or not a child.
 * [EINVAL] : The [options] argument is not valid.
 * [EINTR]  : The call is interrupted by a caught signal or the signal does not have the [SA_RESTART] flag set.
 *
 */
